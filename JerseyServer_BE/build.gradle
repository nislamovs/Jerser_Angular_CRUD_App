buildscript {

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1'
        classpath 'io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.3.3'
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3'
        classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.0.5.RELEASE'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

ext {
    asciiDocOutputDir = file("${buildDir}/asciidoc/generated")
    swaggerOutputDir = file("${buildDir}/swagger")
    snippetsOutputDir = file("${buildDir}/asciidoc/snippets")
    springfoxVersion = '2.4.0'
}

group = 'com.jerseyexample'
version =  '1.0.0'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked"
}

tasks.withType(Jar) {
    destinationDir = file("${buildDir}")
}

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
}

bootJar {
    baseName = 'jerseyexample'
    version =  '1.0.0'
    mainClassName = 'com.jerseyexample.app.JerseydemoApplication'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    mavenLocal()
}

dependencies {

//Lombok
    compileOnly           "org.projectlombok:lombok:1.16.2"
    implementation        "org.projectlombok:lombok:1.16.2"
    testCompileOnly       "org.projectlombok:lombok:1.16.2"
    annotationProcessor   "org.projectlombok:lombok:1.16.2"

//Spring

    implementation        "org.springframework.boot:spring-boot-starter-web"
    implementation        "org.springframework.boot:spring-boot-starter"
    implementation        "org.springframework.boot:spring-boot-starter-jetty"
//    implementation        "org.springframework.boot:spring-boot-starter-jersey"
    implementation        "org.springframework.boot:spring-boot-dependencies:2.0.5.RELEASE"
    implementation        "org.springframework.boot:spring-boot-starter-data-jpa"

//Audit, revisions
    implementation        "org.hibernate:hibernate-jpamodelgen:5.2.12.Final"
    implementation        "org.hibernate:hibernate-envers:5.2.12.Final"
    implementation        "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.9.5"

//Springboot actuator
    implementation        "org.springframework:spring-webmvc"
    implementation        "org.springframework.boot:spring-boot-starter-actuator"

//Jetty
    implementation        "org.eclipse.jetty:jetty-server"
    implementation        "org.eclipse.jetty:jetty-webapp"
    implementation        "org.eclipse.jetty:jetty-rewrite"
    implementation        "org.eclipse.jetty.websocket:websocket-common"
    implementation        "org.eclipse.jetty.websocket:javax-websocket-server-impl"

    implementation        "org.hibernate:hibernate-validator"
    implementation        "javax.servlet:javax.servlet-api"
    implementation        "javax.ws.rs:javax.ws.rs-api"

//Jersey
    implementation        "org.glassfish.jersey.containers:jersey-container-servlet"
    implementation        "org.glassfish.jersey.core:jersey-server"
    implementation        "org.glassfish.jersey.core:jersey-common"
    implementation        "org.glassfish.jersey.media:jersey-media-json-jackson"
    implementation        "org.glassfish.jersey.ext:jersey-spring4"
    implementation        "org.glassfish.jersey.media:jersey-media-multipart"


//    implementation        "org.glassfish.jersey.bundles.repackaged:jersey-guava:2.6"

//Logging
    implementation        "org.slf4j:jcl-over-slf4j"
    implementation        "org.slf4j:slf4j-api"
    implementation        "ch.qos.logback:logback-classic"

//Swagger
    implementation        "io.springfox:springfox-swagger-ui:2.4.0"
    implementation        "io.springfox:springfox-swagger2:2.4.0"
    implementation        "io.swagger:swagger-jersey2-jaxrs:1.5.8"


    compile                 'io.swagger:swagger-annotations:1.5.6'
    compile                 'com.google.guava:guava:18.0'
    compile                 'net.logstash.logback:logstash-logback-encoder:4.5.1'
    compile                 "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.6.5"
    compile                 "com.fasterxml.jackson.module:jackson-module-afterburner:2.6.5"
    testCompile             "io.springfox:springfox-bean-validators:2.4.0"
    testCompile             'org.springframework.restdocs:spring-restdocs-mockmvc'
    testCompile             'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.6.5'

//Stuff
//    implementation        "org.glassfish.jersey.bundles:jaxrs-ri:2.16"
    implementation        "commons-io:commons-io:2.6"
    implementation        "com.h2database:h2:1.4.192"
    implementation        "com.zaxxer:HikariCP"
    implementation        "org.apache.commons:commons-lang3"
    implementation        "org.modelmapper:modelmapper:2.3.2"

//Testing

    testImplementation    "junit:junit:4.12"
    testImplementation    "org.springframework.boot:spring-boot-starter-test"

//    testImplementation "com.sun.jersey.jersey-test-framework:jersey-test-framework-inmemory"
//    testImplementation "com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly2"
//    testImplementation "org.mockito:mockito-core:1.9.0"
//    testImplementation "junit:junit:4.8.2"
//    testImplementation "org.hamcrest:hamcrest-core:1.1"

//    testImplementation    'org.hamcrest:hamcrest-all:1.3'
//    testImplementation    'org.glassfish.jersey.core:jersey-client:2.22.2'

//
//    testImplementation    "org.glassfish.jersey.test-framework.providers:testImplementation:2.27"
}

test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
    systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
}

convertSwagger2markup {
    dependsOn test
    swaggerInput "${swaggerOutputDir}/swagger.json"
    outputDir asciiDocOutputDir
    config = [
            'swagger2markup.pathsGroupedBy' : 'TAGS',
            'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}

asciidoctor {
    dependsOn convertSwagger2markup
    sources {
        include 'index.adoc'
    }
    backends = ['html5', 'pdf']
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDocOutputDir
    ]
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
    from ("${asciidoctor.outputDir}/pdf") {
        into 'static/docs'
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    name "${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

//task dockerBuild(dependsOn: ['install'])

//docker {
//    name "${bootJar.baseName}"
//    tags "${version}"
//    files jar.archivePath
//    buildArgs([JAR_FILE: "${jar.archiveName}"])
//    noCache true
//}
//
//
//dockerRun {
//    name "${bootJar.baseName}-inst"
//    image "${project.name}"
//    ports '8080:8080'
//    daemonize true
//    clean true
//}