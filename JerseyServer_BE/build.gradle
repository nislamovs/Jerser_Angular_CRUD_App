buildscript {
    buildDir = './build'
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1'
        classpath 'io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.3.3'
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3'
        classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.0.5.RELEASE'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'com.github.kt3k.coveralls'

apply from: "./gradle/dependencies.gradle"
apply from: "./gradle/jacoco.gradle"



ext {
    asciiDocOutputDir = file("${buildDir}/asciidoc/generated")
    swaggerOutputDir = file("${buildDir}/swagger")
    snippetsOutputDir = file("${buildDir}/asciidoc/snippets")
    springfoxVersion = '2.4.0'
}

group = 'com.jerseyexample'
version =  '1.0.0'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked"
}

//tasks.withType(Jar) {
//    destinationDir = file("${buildDir}")
//}

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
}

bootJar {
    baseName = 'jerseyexample'
    version =  '1.0.0'
    mainClassName = 'com.jerseyexample.app.JerseydemoApplication'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    mavenLocal()
}

test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
    systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir

    useJUnitPlatform ()

    if (!project.hasProperty('it')) {
        options {
            setExcludeTags(["integration-test"] as Set)
        }
    }

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}

convertSwagger2markup {
    dependsOn test
    swaggerInput "${swaggerOutputDir}/swagger.json"
    outputDir asciiDocOutputDir
    config = [
            'swagger2markup.pathsGroupedBy' : 'TAGS',
            'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}

asciidoctor {
    dependsOn convertSwagger2markup
    sources {
        include 'index.adoc'
    }
    backends = ['html5', 'pdf']
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDocOutputDir
    ]
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
    from ("${asciidoctor.outputDir}/pdf") {
        into 'static/docs'
    }
}

task buildFE(type: Exec) {
    commandLine '../scripts/fe_build/buildFE.sh'
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '5.0'
//}
//task dockerBuild(dependsOn: ['install'])

//docker {
//    name "${bootJar.baseName}"
//    tags "${version}"
//    files jar.archivePath
//    buildArgs([JAR_FILE: "${jar.archiveName}"])
//    noCache true
//}
//
//
//dockerRun {
//    name "${bootJar.baseName}-inst"
//    image "${project.name}"
//    ports '8081:8081'
//    daemonize true
//    clean true
//}